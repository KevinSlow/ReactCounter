[{"C:\\React\\ReactCounter\\src\\index.tsx":"1","C:\\React\\ReactCounter\\src\\reportWebVitals.ts":"2","C:\\React\\ReactCounter\\src\\App.tsx":"3","C:\\React\\ReactCounter\\src\\redux\\reduxStore.ts":"4","C:\\React\\ReactCounter\\src\\redux\\counterReducer.ts":"5","C:\\React\\ReactCounter\\src\\Containers\\SettingCounter\\SettingCounterContainer.tsx":"6","C:\\React\\ReactCounter\\src\\Modules\\SettingCounter\\SettingCounter.tsx":"7","C:\\React\\ReactCounter\\src\\Modules\\Counter\\Counter.tsx":"8","C:\\React\\ReactCounter\\src\\Components\\Input\\MaxValue.tsx":"9","C:\\React\\ReactCounter\\src\\Components\\Input\\StartValue.tsx":"10"},{"size":544,"mtime":1610460414213,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1610460414215,"results":"13","hashOfConfig":"12"},{"size":2259,"mtime":1610476556038,"results":"14","hashOfConfig":"12"},{"size":501,"mtime":1610476547277,"results":"15","hashOfConfig":"12"},{"size":3353,"mtime":1610476810546,"results":"16","hashOfConfig":"12"},{"size":3499,"mtime":1610476326377,"results":"17","hashOfConfig":"12"},{"size":1567,"mtime":1610460414212,"results":"18","hashOfConfig":"12"},{"size":1606,"mtime":1610460414211,"results":"19","hashOfConfig":"12"},{"size":490,"mtime":1610460414208,"results":"20","hashOfConfig":"12"},{"size":517,"mtime":1610460414208,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"4st0w5",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},"C:\\React\\ReactCounter\\src\\index.tsx",["50"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App, { CounterJSApp } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CounterJSApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["51","52"],"C:\\React\\ReactCounter\\src\\reportWebVitals.ts",[],"C:\\React\\ReactCounter\\src\\App.tsx",[],"C:\\React\\ReactCounter\\src\\redux\\reduxStore.ts",["53"],"import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\n\r\n\r\n\r\nexport let reducers = combineReducers({\r\n    counter: counterReducer,\r\n});\r\n\r\nexport type ReduxState = ReturnType<typeof reducers>;\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    // composeWithDevTools(\r\n    //     applyMiddleware(thunkMiddleware)\r\n    //     // other store enhancers if any\r\n    // )\r\n);\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","C:\\React\\ReactCounter\\src\\redux\\counterReducer.ts",["54","55","56","57","58","59","60","61","62"],"C:\\React\\ReactCounter\\src\\Containers\\SettingCounter\\SettingCounterContainer.tsx",["63","64","65"],"import React, {ChangeEvent, useState} from \"react\";\r\nimport {ComponentsContainer} from \"../ComponentsContainer/ComponentsContainer\";\r\nimport s from \"./SettingsCounterCountainer.module.css\";\r\nimport {Counter} from \"../../Modules/Counter/Counter\";\r\nimport { connect } from \"react-redux\";\r\nimport { SettingCounter } from \"../../Modules/SettingCounter/SettingCounter\";\r\n\r\n\r\nexport const SettingCounterContainer = ({...props}: any) => {\r\n    console.log(props)\r\n    // const [startValue, setStartValue] = useState<number>(props.startValue)\r\n    // const [maxValue, setMaxValue] = useState<number>(props.maxValue);\r\n    // const [startValueRender, setStartValueRender] = useState<number>(props.startValue)\r\n    // const [maxValueRender, setMaxValueRender] = useState<number>(props.maxValue)\r\n    //\r\n\r\n\r\n    function maximumValue() {\r\n        if (props.startValue > props.maxValue) {\r\n            return props.setError(\"The value cannot be higher than max value\")\r\n        } else {\r\n            return props.setCount;\r\n        }\r\n    }\r\n\r\n    const setButtonHandler = () => {\r\n        if (!props.error) {\r\n            props.setStartValue(props.startValue)\r\n            props.setMaxValue(props.maxValue)\r\n            props.reset()\r\n        }\r\n    }\r\n\r\n    const check = (begin: number, end: number) => {\r\n        if (begin >= end) {\r\n            props.setError(\"start Value >= max Value\")\r\n        } else if (begin && end < 0) {\r\n            props.setError(\" max Value < 0\")\r\n        } else if (begin < 0) {\r\n            props.setError(\" start Value < 0\")\r\n        } else {\r\n            props.setError(\"\")\r\n        }\r\n    }\r\n    const changeStartValueRender = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setStartValue(e.currentTarget.valueAsNumber)\r\n        check(e.currentTarget.valueAsNumber, props.maxValue)\r\n    }\r\n    const changeMaxValueRender = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(e.currentTarget.valueAsNumber)\r\n        check(props.startValue, e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.counterContainer}>\r\n                <SettingCounter\r\n                    setButtonHandler={setButtonHandler}\r\n                    startValueRender={props.startValueRender}\r\n                    setStartValueRender={props.setStartValueRender}\r\n                    maxValueRender={props.maxValueRender}\r\n                    setMaxValueRender={props.setMaxValueRender}\r\n                    error={props.error}\r\n                    onChangeHandler={changeMaxValueRender}\r\n                    onChangeHandlerMinValue={changeStartValueRender}\r\n                    maximumValue={maximumValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    titleValue={\"Settings\"}\r\n                />\r\n                <Counter\r\n                    startValueRender={props.startValueRender}\r\n                    setStartValueRender={props.setStartValueRender}\r\n                    maxValueRender={props.maxValueRender}\r\n                    setMaxValueRender={props.setMaxValueRender}\r\n                    Increment={props.setCount}\r\n                    Reset={props.reset}\r\n                    maxValue={props.maxValue}\r\n                    error={props.error}\r\n                    startValue={props.startValue}\r\n                    titleValue={\"Counter\"}\r\n                    counter={props.counter}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\React\\ReactCounter\\src\\Modules\\SettingCounter\\SettingCounter.tsx",["66","67","68"],"import React, {ChangeEvent, Dispatch, SetStateAction, useState} from \"react\";\r\nimport s from \"./SettingCounter.module.css\"\r\nimport {MaxValue} from \"../../Components/Input/MaxValue\";\r\nimport {StartValue} from \"../../Components/Input/StartValue\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    titleValue: string,\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    error: string,\r\n    maxValue: number,\r\n    maximumValue: () => void,\r\n    startValue: number,\r\n    onChangeHandlerMinValue: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    startValueRender: number\r\n    setStartValueRender: (start: number) => void\r\n    maxValueRender: number\r\n    setMaxValueRender: (max: number) => void\r\n    setButtonHandler: () => void\r\n}\r\n\r\nexport const SettingCounter = (props: CounterPropsType) => {\r\n\r\n    return (\r\n        <div className={\"settings-counter-blocks\"}>\r\n            <div className={\"settings-counter-block\"}>\r\n                <div className={s.title}>{props.titleValue}</div>\r\n                <MaxValue maxValue={props.maxValue} onChange={props.onChangeHandler}/>\r\n                <div>\r\n                </div>\r\n                <StartValue startValue={props.startValue} onChange={props.onChangeHandlerMinValue}/>\r\n                <div className={s.setValue}>\r\n                    <button disabled={(props.startValueRender === props.startValue && props.maxValue === props.maxValueRender) || props.error !== \"\"}\r\n                            onClick={props.setButtonHandler}>Set</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","C:\\React\\ReactCounter\\src\\Modules\\Counter\\Counter.tsx",["69","70","71"],"import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./Counter.module.css\"\r\n\r\n\r\ntype CounterPropsType = {\r\n    titleValue: string,\r\n    Reset: () => void,\r\n    Increment: () => void\r\n    counter: number\r\n    error: string\r\n    maxValue: number\r\n    startValue: number\r\n    startValueRender: number\r\n    setStartValueRender: (start: number) => void\r\n    maxValueRender: number\r\n    setMaxValueRender: (max: number) => void\r\n}\r\n\r\nexport const Counter = ({...restProps}: CounterPropsType) => {\r\n\r\n    const Rst = () => restProps.Reset()\r\n\r\n\r\n    return (\r\n        <div className={\"counter-blocks\"}>\r\n            <div className={\"counter-blocks_block\"}>\r\n                <div className={s.counter}>\r\n                    <div className={s.title}>{restProps.titleValue}</div>\r\n                    <span>{restProps.error ? restProps.error : restProps.counter}</span>\r\n                </div>\r\n            </div>\r\n            <div className={\"counter-blocks_block\"}>\r\n                <div className={s.buttonsBlocks}>\r\n                    <div className={s.buttonsBlock}>\r\n                        <button disabled={restProps.counter === restProps.maxValue} className={restProps.counter === restProps.maxValue ? s.error : \"\"} onClick={restProps.Increment}>Inc\r\n                        </button>\r\n                    </div>\r\n                    <div className={s.buttonsBlock}>\r\n                        <button disabled={restProps.counter === restProps.startValue} onClick={Rst}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\React\\ReactCounter\\src\\Components\\Input\\MaxValue.tsx",["72","73"],"import React from \"react\";\r\nimport s from \"../../Modules/SettingCounter/SettingCounter.module.css\";\r\n\r\nexport function MaxValue(props: { maxValue: number, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) {\r\n    return <div className=\"MaxValue\">\r\n        <div className={s.inputTitle}>Max Value</div>\r\n        <input className={props.maxValue < 0 && s.error || s.success} type='number' value={props.maxValue}\r\n               onChange={props.onChange}\r\n        />\r\n    </div>;\r\n}","C:\\React\\ReactCounter\\src\\Components\\Input\\StartValue.tsx",["74","75"],"import React from \"react\";\r\nimport s from \"../../Modules/SettingCounter/SettingCounter.module.css\";\r\n\r\nexport function StartValue(props: { startValue: number, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) {\r\n    return <div className={\"settings-counter-block\"}>\r\n        <div className={s.inputTitle}>Start Value</div>\r\n        <input  className={props.startValue < 0 && s.error || s.success} type='number'\r\n               value={props.startValue} onChange={props.onChange}\r\n        />\r\n    </div>;\r\n}",{"ruleId":"76","severity":1,"message":"77","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":11},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"76","severity":1,"message":"84","line":1,"column":9,"nodeType":"78","messageId":"79","endLine":1,"endColumn":24},{"ruleId":"76","severity":1,"message":"85","line":37,"column":7,"nodeType":"78","messageId":"79","endLine":37,"endColumn":17},{"ruleId":"76","severity":1,"message":"86","line":38,"column":7,"nodeType":"78","messageId":"79","endLine":38,"endColumn":14},{"ruleId":"76","severity":1,"message":"87","line":39,"column":7,"nodeType":"78","messageId":"79","endLine":39,"endColumn":12},{"ruleId":"76","severity":1,"message":"88","line":40,"column":7,"nodeType":"78","messageId":"79","endLine":40,"endColumn":16},{"ruleId":"76","severity":1,"message":"89","line":41,"column":7,"nodeType":"78","messageId":"79","endLine":41,"endColumn":29},{"ruleId":"76","severity":1,"message":"90","line":42,"column":7,"nodeType":"78","messageId":"79","endLine":42,"endColumn":27},{"ruleId":"76","severity":1,"message":"91","line":43,"column":7,"nodeType":"78","messageId":"79","endLine":43,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":114,"column":14,"nodeType":"78","messageId":"94","endLine":114,"endColumn":30},{"ruleId":"76","severity":1,"message":"95","line":114,"column":50,"nodeType":"78","messageId":"79","endLine":114,"endColumn":66},{"ruleId":"76","severity":1,"message":"96","line":1,"column":29,"nodeType":"78","messageId":"79","endLine":1,"endColumn":37},{"ruleId":"76","severity":1,"message":"97","line":2,"column":9,"nodeType":"78","messageId":"79","endLine":2,"endColumn":28},{"ruleId":"76","severity":1,"message":"98","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":17},{"ruleId":"76","severity":1,"message":"99","line":1,"column":29,"nodeType":"78","messageId":"79","endLine":1,"endColumn":37},{"ruleId":"76","severity":1,"message":"100","line":1,"column":39,"nodeType":"78","messageId":"79","endLine":1,"endColumn":53},{"ruleId":"76","severity":1,"message":"96","line":1,"column":55,"nodeType":"78","messageId":"79","endLine":1,"endColumn":63},{"ruleId":"76","severity":1,"message":"101","line":1,"column":16,"nodeType":"78","messageId":"79","endLine":1,"endColumn":27},{"ruleId":"76","severity":1,"message":"102","line":1,"column":29,"nodeType":"78","messageId":"79","endLine":1,"endColumn":38},{"ruleId":"76","severity":1,"message":"96","line":1,"column":40,"nodeType":"78","messageId":"79","endLine":1,"endColumn":48},{"ruleId":"103","severity":1,"message":"104","line":7,"column":46,"nodeType":"105","messageId":"106","endLine":7,"endColumn":48},{"ruleId":"103","severity":1,"message":"104","line":7,"column":57,"nodeType":"105","messageId":"106","endLine":7,"endColumn":59},{"ruleId":"103","severity":1,"message":"104","line":7,"column":49,"nodeType":"105","messageId":"106","endLine":7,"endColumn":51},{"ruleId":"103","severity":1,"message":"104","line":7,"column":60,"nodeType":"105","messageId":"106","endLine":7,"endColumn":62},"@typescript-eslint/no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["107"],"no-negated-in-lhs",["108"],"'applyMiddleware' is defined but never used.","'SET_NUMBER' is assigned a value but never used.","'SET_MAX' is assigned a value but never used.","'RESET' is assigned a value but never used.","'SET_START' is assigned a value but never used.","'SET_START_VALUE_RENDER' is assigned a value but never used.","'SET_MAX_VALUE_RENDER' is assigned a value but never used.","'ERROR' is assigned a value but never used.","@typescript-eslint/no-redeclare","'MaxValueRenderAC' is already defined.","redeclared","'MaxValueRenderAC' is assigned a value but never used.","'useState' is defined but never used.","'ComponentsContainer' is defined but never used.","'connect' is defined but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'ChangeEvent' is defined but never used.","'useEffect' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]