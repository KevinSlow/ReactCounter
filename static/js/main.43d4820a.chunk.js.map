{"version":3,"sources":["Containers/SettingCounter/SettingsCounterCountainer.module.css","redux/counterReducer.ts","redux/reduxStore.ts","Modules/Counter/Counter.tsx","Components/Input/MaxValue.tsx","Components/Input/StartValue.tsx","Modules/SettingCounter/SettingCounter.tsx","Containers/SettingCounter/SettingCounterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","Modules/SettingCounter/SettingCounter.module.css","Modules/Counter/Counter.module.css"],"names":["module","exports","getStartValue","localStorage","Number","initialState","startValue","maxValue","counter","startValueRender","maxValueRender","error","MaxValueAC","value","type","reducers","combineReducers","state","action","newValue","store","createStore","window","Counter","restProps","className","s","title","titleValue","buttonsBlocks","buttonsBlock","disabled","onClick","Increment","Reset","MaxValue","props","inputTitle","success","onChange","StartValue","SettingCounter","onChangeHandler","onChangeHandlerMinValue","setValue","setButtonHandler","SettingCounterContainer","console","log","check","begin","end","setError","counterContainer","setStartValue","setMaxValue","reset","setStartValueRender","setMaxValueRender","e","currentTarget","valueAsNumber","maximumValue","setCount","App","increment","SetError","AppContainer","connect","dispatch","StartValueRenderAC","MaxValueRenderAC","StartValueAC","setDisplay","errorAction","CounterJSApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43d4820a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"SettingsCounterCountainer_counterContainer__3ZTxH\"};","const getStartValue = () => {\r\n    return localStorage[\"start\"] ? Number(localStorage[\"start\"]) : 0\r\n}\r\nconst getMaxValue = () => {\r\n    return localStorage[\"Max\"] ? Number(localStorage[\"Max\"]) : 0\r\n}\r\nconst initialState = {\r\n    startValue: getStartValue(),\r\n    maxValue: getMaxValue(),\r\n    counter: getStartValue(),\r\n    startValueRender: 0,\r\n    maxValueRender: 0,\r\n    error: \"\"\r\n}\r\ntype Statetype = {\r\n    startValue: number,\r\n    maxValue: number,\r\n    counter: number\r\n    startValueRender: number,\r\n    maxValueRender: number,\r\n    error: string\r\n}\r\ntype NumUpACType = {\r\n    type: 'NUM-UP'\r\n}\r\ntype ResetACType = {\r\n    type: 'RESET'\r\n}\r\ntype MaxValueACType = {\r\n    type: 'SET_MAX'\r\n    value: number\r\n}\r\ntype StartValueACType = {\r\n    type: 'SET_START'\r\n    value: number\r\n}\r\nconst SET_NUMBER = \"SET_NUMBER\"\r\nconst SET_MAX = \"SET_MAX_VALUE\"\r\nconst RESET = \"RESET\"\r\nconst SET_START = \"SET_START\"\r\nconst SET_START_VALUE_RENDER = \"SET_START_VALUE_RENDER\"\r\nconst SET_MAX_VALUE_RENDER = \"SET_MAX_VALUE_RENDER\"\r\nconst ERROR = \"ERROR\"\r\n\r\n\r\ntype ActionType = NumUpACType | ResetACType | MaxValueACType | StartValueACType | StartValueRenderACType | MaxValueRenderACType | ErrorACType\r\n\r\nexport const counterReducer = (state: Statetype = initialState, action: ActionType): Statetype => {\r\n    switch (action.type) {\r\n        case \"NUM-UP\": {\r\n            const newValue = state.counter + 1\r\n            return {\r\n                ...state,\r\n                counter: newValue\r\n            };\r\n        }\r\n        case \"RESET\": {\r\n            return {...state, counter: state.startValue};\r\n        }\r\n        case \"SET_START\": {\r\n            localStorage[\"start\"] = action.value\r\n            return {...state, startValue: action.value};\r\n        }\r\n        case \"SET_MAX\": {\r\n            localStorage[\"Max\"] = action.value\r\n            return {...state, maxValue: action.value};\r\n        }\r\n        case \"SET_START_VALUE_RENDER\": {\r\n            return {...state, startValueRender: state.startValue};\r\n        }\r\n        case \"SET_MAX_VALUE_RENDER\": {\r\n            return {...state, maxValueRender: state.maxValue};\r\n        }\r\n        case \"ERROR\": {\r\n            return {...state, error: action.error};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const incrementAC = (): NumUpACType => {\r\n    return {type: \"NUM-UP\"}\r\n}\r\nexport const resetAC = (): ResetACType => {\r\n    return {type: \"RESET\"}\r\n}\r\nexport const MaxValueAC = (value: number): MaxValueACType => {\r\n    return {type: \"SET_MAX\", value}\r\n}\r\nexport const StartValueAC = (value: number): StartValueACType => {\r\n    return {type: \"SET_START\", value}\r\n}\r\n\r\ninterface StartValueRenderACType {\r\n    type: \"SET_START_VALUE_RENDER\",\r\n    value: number\r\n}\r\ninterface MaxValueRenderACType {\r\n    type: \"SET_MAX_VALUE_RENDER\",\r\n    value: number\r\n}\r\ninterface MaxValueRenderAC {\r\n    type: \"SET_MAX_VALUE_RENDER\",\r\n    value: number\r\n}\r\ninterface ErrorACType {\r\n    type: \"ERROR\",\r\n    error: string\r\n}\r\nexport const StartValueRenderAC = (value: number): StartValueRenderACType => {\r\n    return {type: \"SET_START_VALUE_RENDER\", value}\r\n}\r\nexport const MaxValueRenderAC = (value: number): MaxValueRenderAC => {\r\n    return {type: \"SET_MAX_VALUE_RENDER\",\r\n        value}\r\n}\r\nexport const errorAction = (error: string): ErrorACType => {\r\n    return {type: \"ERROR\", error}\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\n\r\n\r\n\r\nexport let reducers = combineReducers({\r\n    counter: counterReducer,\r\n});\r\n\r\nexport type ReduxState = ReturnType<typeof reducers>;\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    // composeWithDevTools(\r\n    //     applyMiddleware(thunkMiddleware)\r\n    //     // other store enhancers if any\r\n    // )\r\n);\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./Counter.module.css\"\r\n\r\n\r\ntype CounterPropsType = {\r\n    titleValue: string,\r\n    Reset: () => void,\r\n    Increment: () => void\r\n    counter: number\r\n    error: string\r\n    maxValue: number\r\n    startValue: number\r\n    startValueRender: number\r\n    setStartValueRender: (start: number) => void\r\n    maxValueRender: number\r\n    setMaxValueRender: (max: number) => void\r\n}\r\n\r\nexport const Counter = ({...restProps}: CounterPropsType) => {\r\n\r\n    const Rst = () => restProps.Reset()\r\n\r\n\r\n    return (\r\n        <div className={\"counter-blocks\"}>\r\n            <div className={\"counter-blocks_block\"}>\r\n                <div className={s.counter}>\r\n                    <div className={s.title}>{restProps.titleValue}</div>\r\n                    <span>{restProps.error ? restProps.error : restProps.counter}</span>\r\n                </div>\r\n            </div>\r\n            <div className={\"counter-blocks_block\"}>\r\n                <div className={s.buttonsBlocks}>\r\n                    <div className={s.buttonsBlock}>\r\n                        <button disabled={restProps.counter === restProps.maxValue} className={restProps.counter === restProps.maxValue ? s.error : \"\"} onClick={restProps.Increment}>Inc\r\n                        </button>\r\n                    </div>\r\n                    <div className={s.buttonsBlock}>\r\n                        <button disabled={restProps.counter === restProps.startValue} onClick={Rst}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../../Modules/SettingCounter/SettingCounter.module.css\";\r\n\r\nexport function MaxValue(props: { maxValue: number, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) {\r\n    return <div className=\"MaxValue\">\r\n        <div className={s.inputTitle}>Max Value</div>\r\n        <input className={props.maxValue < 0 && s.error || s.success} type='number' value={props.maxValue}\r\n               onChange={props.onChange}\r\n        />\r\n    </div>;\r\n}","import React from \"react\";\r\nimport s from \"../../Modules/SettingCounter/SettingCounter.module.css\";\r\n\r\nexport function StartValue(props: { startValue: number, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) {\r\n    return <div className={\"settings-counter-block\"}>\r\n        <div className={s.inputTitle}>Start Value</div>\r\n        <input  className={props.startValue < 0 && s.error || s.success} type='number'\r\n               value={props.startValue} onChange={props.onChange}\r\n        />\r\n    </div>;\r\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useState} from \"react\";\r\nimport s from \"./SettingCounter.module.css\"\r\nimport {MaxValue} from \"../../Components/Input/MaxValue\";\r\nimport {StartValue} from \"../../Components/Input/StartValue\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    titleValue: string,\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    error: string,\r\n    maxValue: number,\r\n    maximumValue: () => void,\r\n    startValue: number,\r\n    onChangeHandlerMinValue: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    startValueRender: number\r\n    setStartValueRender: (start: number) => void\r\n    maxValueRender: number\r\n    setMaxValueRender: (max: number) => void\r\n    setButtonHandler: () => void\r\n}\r\n\r\nexport const SettingCounter = (props: CounterPropsType) => {\r\n\r\n    return (\r\n        <div className={\"settings-counter-blocks\"}>\r\n            <div className={\"settings-counter-block\"}>\r\n                <div className={s.title}>{props.titleValue}</div>\r\n                <MaxValue maxValue={props.maxValue} onChange={props.onChangeHandler}/>\r\n                <div>\r\n                </div>\r\n                <StartValue startValue={props.startValue} onChange={props.onChangeHandlerMinValue}/>\r\n                <div className={s.setValue}>\r\n                    <button disabled={(props.startValueRender === props.startValue && props.maxValue === props.maxValueRender) || props.error !== \"\"}\r\n                            onClick={props.setButtonHandler}>Set</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {ComponentsContainer} from \"../ComponentsContainer/ComponentsContainer\";\r\nimport s from \"./SettingsCounterCountainer.module.css\";\r\nimport {Counter} from \"../../Modules/Counter/Counter\";\r\nimport { connect } from \"react-redux\";\r\nimport { SettingCounter } from \"../../Modules/SettingCounter/SettingCounter\";\r\n\r\n\r\nexport const SettingCounterContainer = ({...props}: any) => {\r\n    console.log(props)\r\n    // const [startValue, setStartValue] = useState<number>(props.startValue)\r\n    // const [maxValue, setMaxValue] = useState<number>(props.maxValue);\r\n    // const [startValueRender, setStartValueRender] = useState<number>(props.startValue)\r\n    // const [maxValueRender, setMaxValueRender] = useState<number>(props.maxValue)\r\n    //\r\n\r\n\r\n    function maximumValue() {\r\n        if (props.startValue > props.maxValue) {\r\n            return props.setError(\"The value cannot be higher than max value\")\r\n        } else {\r\n            return props.setCount;\r\n        }\r\n    }\r\n\r\n    const setButtonHandler = () => {\r\n        if (!props.error) {\r\n            props.setStartValue(props.startValue)\r\n            props.setMaxValue(props.maxValue)\r\n            props.reset()\r\n        }\r\n    }\r\n\r\n    const check = (begin: number, end: number) => {\r\n        if (begin >= end) {\r\n            props.setError(\"start Value >= max Value\")\r\n        } else if (begin && end < 0) {\r\n            props.setError(\" max Value < 0\")\r\n        } else if (begin < 0) {\r\n            props.setError(\" start Value < 0\")\r\n        } else {\r\n            props.setError(\"\")\r\n        }\r\n    }\r\n    const changeStartValueRender = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setStartValue(e.currentTarget.valueAsNumber)\r\n        check(e.currentTarget.valueAsNumber, props.maxValue)\r\n    }\r\n    const changeMaxValueRender = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(e.currentTarget.valueAsNumber)\r\n        check(props.startValue, e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.counterContainer}>\r\n                <SettingCounter\r\n                    setButtonHandler={setButtonHandler}\r\n                    startValueRender={props.startValueRender}\r\n                    setStartValueRender={props.setStartValueRender}\r\n                    maxValueRender={props.maxValueRender}\r\n                    setMaxValueRender={props.setMaxValueRender}\r\n                    error={props.error}\r\n                    onChangeHandler={changeMaxValueRender}\r\n                    onChangeHandlerMinValue={changeStartValueRender}\r\n                    maximumValue={maximumValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    titleValue={\"Settings\"}\r\n                />\r\n                <Counter\r\n                    startValueRender={props.startValueRender}\r\n                    setStartValueRender={props.setStartValueRender}\r\n                    maxValueRender={props.maxValueRender}\r\n                    setMaxValueRender={props.setMaxValueRender}\r\n                    Increment={props.setCount}\r\n                    Reset={props.reset}\r\n                    maxValue={props.maxValue}\r\n                    error={props.error}\r\n                    startValue={props.startValue}\r\n                    titleValue={\"Counter\"}\r\n                    counter={props.counter}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect, Provider} from 'react-redux';\r\nimport './App.css';\r\nimport store from './redux/reduxStore';\r\nimport {\r\n    errorAction,\r\n    incrementAC,\r\n    MaxValueAC,\r\n    MaxValueRenderAC,\r\n    resetAC,\r\n    StartValueAC,\r\n    StartValueRenderAC\r\n} from \"./redux/counterReducer\";\r\nimport { SettingCounterContainer } from './Containers/SettingCounter/SettingCounterContainer';\r\n\r\n\r\n\r\nfunction App(props:any) {\r\n  return (\r\n    <div className=\"App\">\r\n      <SettingCounterContainer\r\n          startValue={props.startValue}\r\n          setStartValue={props.setStartValue}\r\n          maxValue={props.maxValue}\r\n          setMaxValue={props.setMaxValue}\r\n          counter={props.counter}\r\n          reset={props.reset}\r\n          setCount={props.increment}\r\n          startValueRender={props.startValueRender}\r\n          maxValueRender={props.maxValueRender}\r\n          setError={props.SetError}\r\n          error={props.error}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        startValue: state.counter.startValue,\r\n        maxValue: state.counter.maxValue,\r\n        counter: state.counter.counter,\r\n        startValueRender: state.counter.startValueRender,\r\n        maxValueRender: state.counter.maxValueRender,\r\n        error: state.counter.error\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: any) => void) => {\r\n    return {\r\n        setStartValueRender: (value: number) => dispatch(StartValueRenderAC(value)),\r\n        setMaxValueRender: (value: number) => dispatch(MaxValueRenderAC(value)),\r\n        increment: () => {\r\n            dispatch(incrementAC())\r\n        },\r\n        setStartValue: (value: number) => dispatch(StartValueAC(value)),\r\n        setMaxValue: (value: number) => dispatch(MaxValueAC(value)),\r\n        setDisplay: (value: number) => dispatch(MaxValueAC(value)),\r\n        reset: () => dispatch(resetAC()),\r\n        SetError: (error: string) => (dispatch(errorAction(error)))\r\n    }\r\n}\r\nexport const AppContainer = connect(mapStateToProps, mapDispatchToProps)(App)\r\n\r\nexport const CounterJSApp = () => {\r\n    return (\r\n            <Provider store={store}>\r\n                <AppContainer />\r\n            </Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App, { CounterJSApp } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CounterJSApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SettingCounter_error__xkEDJ\",\"inputTitle\":\"SettingCounter_inputTitle__3dvK2\",\"setValue\":\"SettingCounter_setValue__3m9BS\",\"title\":\"SettingCounter_title__2J_W5\",\"success\":\"SettingCounter_success__2K82u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Counter_title__33iGl\",\"counter\":\"Counter_counter__147gW\",\"buttonsBlocks\":\"Counter_buttonsBlocks__ohcWh\",\"buttonsBlock\":\"Counter_buttonsBlock__xXJLh\",\"appLayer\":\"Counter_appLayer__1roLR\",\"CounterBlock\":\"Counter_CounterBlock__2Quyv\",\"error\":\"Counter_error__FOyA1\",\"white\":\"Counter_white__3tbuw\",\"number\":\"Counter_number__1vE8n\",\"button-blocks\":\"Counter_button-blocks__1Vv7i\"};"],"sourceRoot":""}